import os
import django
import random
from datetime import datetime, timedelta

# C√†i ƒë·∫∑t m√¥i tr∆∞·ªùng Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "backend.settings")
django.setup()

from django.contrib.auth.models import User
from django.utils import timezone
from users.models import Profile, Friendship, Follow
from posts.models import Post, Like, Share
from comments.models import Comment, CommentVote
from chat.models import Room, Message, UserStatus


# T·∫°o ng∆∞·ªùi d√πng m·∫´u
def create_users():
    usernames = ["trung", "linh", "minh", "huong", "tuan", "hoa", "nam", "thanh"]
    users = []

    print("T·∫°o ng∆∞·ªùi d√πng...")

    for username in usernames:
        if not User.objects.filter(username=username).exists():
            user = User.objects.create_user(
                username=username, email=f"{username}@example.com", password="123456"
            )
            user.first_name = username.capitalize()
            user.last_name = "Nguy·ªÖn"
            user.save()

            # C·∫≠p nh·∫≠t profile
            profile = user.profile
            profile.bio = f"ƒê√¢y l√† trang c√° nh√¢n c·ªßa {username.capitalize()}"
            profile.location = "Vi·ªát Nam"
            profile.birth_date = timezone.now().date() - timedelta(
                days=random.randint(8000, 12000)
            )
            profile.save()

            users.append(user)
            print(f"  ƒê√£ t·∫°o ng∆∞·ªùi d√πng: {username}")

    return users if users else User.objects.all()


# T·∫°o m·ªëi quan h·ªá b·∫°n b√® v√† theo d√µi
def create_relationships(users):
    print("T·∫°o m·ªëi quan h·ªá b·∫°n b√® v√† theo d√µi...")

    for i, user1 in enumerate(users):
        for j, user2 in enumerate(users):
            if i != j:  # T·∫°o b·∫°n b√® (kho·∫£ng 50% ng∆∞·ªùi d√πng)
                if (
                    random.random() > 0.5
                    and not Friendship.objects.filter(
                        (
                            django.db.models.Q(sender=user1)
                            & django.db.models.Q(receiver=user2)
                        )
                        | (
                            django.db.models.Q(sender=user2)
                            & django.db.models.Q(receiver=user1)
                        )
                    ).exists()
                ):
                    friendship = Friendship.objects.create(
                        sender=user1, receiver=user2, status="accepted"
                    )
                    print(f"  {user1.username} v√† {user2.username} l√† b·∫°n b√®")

                # T·∫°o ng∆∞·ªùi theo d√µi (kho·∫£ng 70% ng∆∞·ªùi d√πng)
                if (
                    random.random() > 0.3
                    and not Follow.objects.filter(
                        follower=user1, followed=user2
                    ).exists()
                ):
                    follow = Follow.objects.create(follower=user1, followed=user2)
                    print(f"  {user1.username} theo d√µi {user2.username}")


# T·∫°o b√†i vi·∫øt m·∫´u
def create_posts(users):
    print("T·∫°o b√†i vi·∫øt...")

    posts = []
    contents = [
        "H√¥m nay tr·ªùi ƒë·∫πp qu√°! üåû",
        "V·ª´a ƒë·ªçc xong m·ªôt cu·ªën s√°ch hay! C√°c b·∫°n c√≥ ƒë·ªÅ xu·∫•t g√¨ kh√¥ng?",
        "M√≥n ƒÉn h√¥m nay r·∫•t ngon! üçú",
        "ƒêi l√†m m·ªát qu√°, v·ªÅ ƒë·∫øn nh√† l√† mu·ªën ngh·ªâ ng∆°i!",
        "Cu·ªëi tu·∫ßn c√≥ ai r·∫£nh kh√¥ng? ƒêi c√† ph√™ kh√¥ng?",
        "V·ª´a xem m·ªôt b·ªô phim hay! M·ªçi ng∆∞·ªùi ƒë√£ xem 'Kh√¥ng th·ªÉ kh√¥ng xem' ch∆∞a?",
        "Ng√†y h√¥m nay th·∫≠t tuy·ªát v·ªùi! üòä",
        "ƒêang h·ªçc m·ªôt k·ªπ nƒÉng m·ªõi, r·∫•t th√∫ v·ªã!",
        "M√¨nh v·ª´a th·ª≠ m·ªôt nh√† h√†ng m·ªõi, ƒë·ªì ƒÉn kh√° ngon! üçï",
        "Ai c√≥ kinh nghi·ªám v·ªÅ l·∫≠p tr√¨nh Python kh√¥ng? M√¨nh ƒëang b·ªã stuck!",
    ]

    for user in users:
        for _ in range(random.randint(1, 5)):  # M·ªói ng∆∞·ªùi d√πng t·∫°o 1-5 b√†i vi·∫øt
            post = Post.objects.create(
                user=user,
                content=random.choice(contents),
                is_public=random.random() > 0.1,  # 90% b√†i vi·∫øt l√† c√¥ng khai
            )
            posts.append(post)
            print(f"  {user.username} ƒë√£ ƒëƒÉng m·ªôt b√†i vi·∫øt")

    return posts


# T·∫°o like v√† share
def create_interactions(users, posts):
    print("T·∫°o like v√† share...")

    for user in users:
        # M·ªói ng∆∞·ªùi d√πng like kho·∫£ng 40% b√†i vi·∫øt
        for post in random.sample(posts, int(len(posts) * 0.4)):
            if not Like.objects.filter(user=user, post=post).exists():
                Like.objects.create(user=user, post=post)
                print(f"  {user.username} ƒë√£ like b√†i vi·∫øt c·ªßa {post.user.username}")

        # M·ªói ng∆∞·ªùi d√πng share kho·∫£ng 10% b√†i vi·∫øt
        for post in random.sample(posts, int(len(posts) * 0.1)):
            if not Share.objects.filter(user=user, post=post).exists():
                Share.objects.create(
                    user=user,
                    post=post,
                    content=f"Chia s·∫ª b√†i vi·∫øt c·ªßa {post.user.username}",
                )
                print(f"  {user.username} ƒë√£ share b√†i vi·∫øt c·ªßa {post.user.username}")


# T·∫°o comment v√† vote
def create_comments(users, posts):
    print("T·∫°o comments v√† votes...")

    comments = []
    contents = [
        "R·∫•t hay!",
        "M√¨nh ƒë·ªìng √Ω v·ªõi b·∫°n.",
        "Th√∫ v·ªã ƒë·∫•y!",
        "M√¨nh kh√¥ng ƒë·ªìng √Ω l·∫Øm, nh∆∞ng t√¥n tr·ªçng √Ω ki·∫øn c·ªßa b·∫°n.",
        "L√†m t·ªët l·∫Øm!",
        "C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª!",
        "Th√¥ng tin r·∫•t h·ªØu √≠ch.",
        "M√¨nh c√≥ th·∫Øc m·∫Øc m·ªôt ch√∫t.",
        "Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh!",
        "M√¨nh s·∫Ω th·ª≠ xem!",
    ]

    for post in posts:
        # M·ªói b√†i vi·∫øt c√≥ 0-8 comment
        for _ in range(random.randint(0, 8)):
            user = random.choice(users)
            if user != post.user:  # Kh√¥ng comment v√†o b√†i vi·∫øt c·ªßa ch√≠nh m√¨nh
                comment = Comment.objects.create(
                    user=user, post=post, content=random.choice(contents)
                )
                comments.append(comment)
                print(
                    f"  {user.username} ƒë√£ comment v√†o b√†i vi·∫øt c·ªßa {post.user.username}"
                )

    # T·∫°o reply cho kho·∫£ng 30% comment
    for comment in random.sample(comments, int(len(comments) * 0.3)):
        user = random.choice(users)
        if user != comment.user:  # Kh√¥ng reply comment c·ªßa ch√≠nh m√¨nh
            reply = Comment.objects.create(
                user=user,
                post=comment.post,
                parent=comment,
                content=f"Tr·∫£ l·ªùi {comment.user.username}: " + random.choice(contents),
            )
            comments.append(reply)
            print(f"  {user.username} ƒë√£ tr·∫£ l·ªùi comment c·ªßa {comment.user.username}")

    # T·∫°o vote cho comment
    for comment in comments:
        # M·ªói comment ƒë∆∞·ª£c vote b·ªüi 0-5 ng∆∞·ªùi
        for _ in range(random.randint(0, 5)):
            user = random.choice(users)
            if (
                user != comment.user
                and not CommentVote.objects.filter(user=user, comment=comment).exists()
            ):
                vote_type = (
                    "upvote" if random.random() > 0.3 else "downvote"
                )  # 70% l√† upvote
                CommentVote.objects.create(
                    user=user, comment=comment, vote_type=vote_type
                )
                print(
                    f"  {user.username} ƒë√£ {vote_type} comment c·ªßa {comment.user.username}"
                )


# T·∫°o ph√≤ng chat v√† tin nh·∫Øn
def create_chats(users):
    print("T·∫°o ph√≤ng chat v√† tin nh·∫Øn...")

    messages = [
        "Ch√†o b·∫°n!",
        "B·∫°n kh·ªèe kh√¥ng?",
        "H√¥m nay b·∫°n l√†m g√¨ v·∫≠y?",
        "M√¨nh c√≥ m·ªôt c√¢u h·ªèi n√†y...",
        "C·∫£m ∆°n b·∫°n r·∫•t nhi·ªÅu!",
        "H·∫πn g·∫∑p l·∫°i b·∫°n!",
        "C√≥ g√¨ m·ªõi kh√¥ng?",
        "M√¨nh ƒëang ·ªü nh√†.",
        "B·∫°n c√≥ r·∫£nh kh√¥ng?",
        "T·ªëi nay ƒëi ƒÉn kh√¥ng?",
    ]

    # T·∫°o ph√≤ng chat cho kho·∫£ng 50% c·∫∑p ng∆∞·ªùi d√πng
    for i, user1 in enumerate(users):
        for j, user2 in enumerate(users):
            if (
                i < j and random.random() > 0.5
            ):  # Ch·ªâ t·∫°o m·ªôt ph√≤ng cho m·ªói c·∫∑p ng∆∞·ªùi d√πng
                room = Room.objects.create()
                room.participants.add(user1, user2)

                # T·∫°o tin nh·∫Øn trong ph√≤ng chat
                num_messages = random.randint(3, 15)
                for _ in range(num_messages):
                    sender = random.choice([user1, user2])
                    Message.objects.create(
                        room=room,
                        sender=sender,
                        content=random.choice(messages),
                        is_read=random.random() > 0.3,  # 70% tin nh·∫Øn ƒë√£ ƒë·ªçc
                    )

                print(
                    f"  ƒê√£ t·∫°o ph√≤ng chat gi·ªØa {user1.username} v√† {user2.username} v·ªõi {num_messages} tin nh·∫Øn"
                )


# T·∫°o tr·∫°ng th√°i online cho ng∆∞·ªùi d√πng
def create_user_statuses(users):
    print("T·∫°o tr·∫°ng th√°i online cho ng∆∞·ªùi d√πng...")

    for user in users:
        is_online = random.random() > 0.7  # 30% ng∆∞·ªùi d√πng ƒëang online
        UserStatus.objects.update_or_create(
            user=user,
            defaults={
                "is_online": is_online,
                "last_activity": (
                    timezone.now()
                    if is_online
                    else timezone.now() - timedelta(minutes=random.randint(10, 1000))
                ),
            },
        )
        status = "online" if is_online else "offline"
        print(f"  {user.username} ƒëang {status}")


# Ch·∫°y t·∫•t c·∫£ c√°c h√†m
def run():
    print("B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u...")

    users = create_users()
    create_relationships(users)
    posts = create_posts(users)
    create_interactions(users, posts)
    create_comments(users, posts)
    create_chats(users)
    create_user_statuses(users)

    print("ƒê√£ t·∫°o xong d·ªØ li·ªáu m·∫´u!")


if __name__ == "__main__":
    run()
